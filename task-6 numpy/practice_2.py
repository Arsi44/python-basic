import numpy as np

# # Функция arange аналогична функции range, но возвращает массив
# np.arange(1, 6, 2, dtype=int)
#
# # Функции zeros и ones создают новые массивы с установленной размерностью, заполненные этими значениями.
# np.ones((2, 3), dtype=float)
# np.zeros(7, dtype=int)
#
# # Функции zeros_like и ones_like могут преобразовать уже созданный массив,
# # заполнив его нулями и единицами соответственно:
# a = np.array([[1, 2, 3], [4, 5, 6]], float)
# np.zeros_like(a)
# np.ones_like(a)
#
# # Существуют шаблонные функции для создания матриц, например, np.identity, np.eye
# np.identity(4, dtype=float)
# np.eye(4, k=1, dtype=float)
##############################################################################
# # Математические операции над массивами
# a = np.array([1, 2, 3], int)
# b = np.array([5, 2, 6], int)
# print(a + b)
#
# a = np.array([[1, 2], [3, 4]], float)
# b = np.array([[2, 0], [1, 3]], float)
# print(a * b)
##############################################################################
# # Изменяем количество осей с помощью newaxis и совершаем действия над матрицами
# a = np.zeros((2, 2), float)
# b = np.array([-1., 3.], float)
# print(b)
# print(b.shape)
# print(b[np.newaxis, :])
# print(b[np.newaxis, :].shape)
# print(b[:, np.newaxis])
# print(b[:, np.newaxis].shape)
# print('----------')
# print(a + b[np.newaxis, :])
# print(a + b[:, np.newaxis])
##############################################################################
# # Вдобавок к стандартным операторам, в numpy включена библиотека стандартных математических функций,
# # которые могут быть применены поэлементно к массивам.
# # Собственно функции: abs, sign, sqrt, log, log10, exp,
# # sin, cos, tan, arcsin, arccos, arctan, sinh, cosh, tanh, arcsinh, arccosh, и arctanh.
# a = np.array([1, 4, 9], float)
# print(np.sqrt(a))
#
# # Функции floor, ceil и rint возвращают нижние, верхние или ближайшие (округлённое)
# a = np.array([1.1, 1.5, 1.9], float)
# np.floor(a)
#
# # Константы:
# print(np.pi)
# print(np.e)
##############################################################################
# # Итерация по массивам
#
# a = np.array([1, 4, 5], int)
# for x in a:
#     print(x)
#
# a = np.array([[1, 2], [3, 4], [5, 6]], float)
# for (x, y) in a:
#     print(x * y)
##############################################################################
# # Другие функции
# a = np.array([2, 4, 3], float)
# a.sum()
# a.prod()  # умножение
# a.mean()  # среднее
# a.var()  # вариация
# a.std()  # девиация
# a.min()
# a.max()
# a.argmin()  # индексы
# a.argmax()  # индексы
# a.sort() # сортировка
# np.unique(a)  # уникальные жлементы в a
##############################################################################
# # Для многомерных массивов каждая из функций может принять дополнительный аргумент axis
# # и в зависимости от его значения выполнять функции по определенной оси, помещая результаты исполнения в массив:
# a = np.array([[0, 2], [3, -1], [3, 5]], float)
# a.mean(axis=0)
# a.mean(axis=1)
# a.min(axis=1)
# a.max(axis=0)
#
# # Значения в массиве могут быть «сокращены», чтобы принадлежать заданному диапазону.
# a = np.array([6, 2, 5, -1, 0], float)
# a.clip(0, 5)