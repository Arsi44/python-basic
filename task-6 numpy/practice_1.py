import numpy as np

# a = np.array([1, 4, 5, 8], float)
# print(a)  # [1. 4. 5. 8.]
# print(type(a))  # <class 'numpy.ndarray'>
# print(a[:2])
# print(a[3])
##############################################################################
# a = np.array([[1, 2, 3], [4, 5, 6]], float)
# print(a)
# print(a[0, 0])
# print(a[1, :])
# print(a[-1:, -2:])
#
# # SHAPE Возвращает количество строк и столбцов в массиве
# print(a.shape)
#
# # dtype возвращает тип переменных, хранящихся в массиве
# print(a.dtype)
#
# # Метод len возвращает длину первого измерения (оси):
# print(len(a))
#
# # Метод in используется для проверки на наличие элемента в массиве:
# print(2 in a, 0 in a)
#
# # Переопределения массива из одномерного в двумерный (reshape)
# a = np.array(range(10), float)
# print(a)
# a = a.reshape((5, 2))
# print(a)
# print(a.shape)
##############################################################################
# # Для создания массива используется метод COPY, иначе будет ссылка на 1 объект
# a = np.array([1, 2, 3], float)
# b = a
# c = a.copy()
# # print(id(a))
# # print(id(b))
# # print(id(c))
#
# # Списки можно тоже создавать с массивов:
# a = np.array([1, 2, 3], float)
# a = a.tolist()
# print(a)
# # Транспонирование массивов также возможно, при этом создается новый массив:
# a = np.array(range(6), float).reshape((2, 3))
# print(a)
# print(a.transpose())
#
# # Многомерный массив можно переконвертировать в одномерный при помощи метода flatten:
# a = np.array([[1, 2, 3], [4, 5, 6]], float)
# print(a.flatten())
#
# # Два или больше массивов можно сконкатенировать при помощи метода concatenate:
# a = np.array([1, 2], float)
# b = np.array([3, 4, 5, 6], float)
# c = np.array([7, 8, 9], float)
# print(np.concatenate((a, b, c)))
##############################################################################
# # Если массив не одномерный, можно задать ось, по которой будет происходить соединение.
# # По умолчанию (не задавая значения оси), соединение будет происходить по первому измерению:
# a = np.array([[1, 2], [3, 4]], float)
# b = np.array([[5, 6], [7, 8]], float)
# print(np.concatenate((a, b)))
# print(np.concatenate((a, b), axis=0))
# print(np.concatenate((a, b), axis=1))
##############################################################################
# # Размерность массива может быть увеличена при использовании константы newaxis в квадратных скобках:
a = np.array([1, 2, 3], float)
print(a[:, np.newaxis])
print(a[:, np.newaxis].shape)
print(a[np.newaxis, :])
print(a[np.newaxis, :].shape)
